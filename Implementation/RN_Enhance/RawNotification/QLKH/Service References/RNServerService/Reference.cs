//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QLKH.RNServerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RNServerService.IRNServerCommunicator")]
    public interface IRNServerCommunicator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNServerCommunicator/SendAllNotification", ReplyAction="http://tempuri.org/IRNServerCommunicator/SendAllNotificationResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RawNotification.Models.BaseServiceResult<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RawNotification.Models.BaseServiceResult<string, long>))]
        RawNotification.Models.BaseServiceResult SendAllNotification();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNServerCommunicator/SendAllNotification", ReplyAction="http://tempuri.org/IRNServerCommunicator/SendAllNotificationResponse")]
        System.Threading.Tasks.Task<RawNotification.Models.BaseServiceResult> SendAllNotificationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNServerCommunicator/AddNotification", ReplyAction="http://tempuri.org/IRNServerCommunicator/AddNotificationResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RawNotification.Models.BaseServiceResult<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(RawNotification.Models.BaseServiceResult<string, long>))]
        RawNotification.Models.BaseServiceResult AddNotification(byte[] Notification, byte[] NotificationPreviewContent, string[] oldReceiverIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNServerCommunicator/AddNotification", ReplyAction="http://tempuri.org/IRNServerCommunicator/AddNotificationResponse")]
        System.Threading.Tasks.Task<RawNotification.Models.BaseServiceResult> AddNotificationAsync(byte[] Notification, byte[] NotificationPreviewContent, string[] oldReceiverIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNServerCommunicator/AddReceiver", ReplyAction="http://tempuri.org/IRNServerCommunicator/AddReceiverResponse")]
        RawNotification.Models.BaseServiceResult<string, long> AddReceiver(string oldReceiverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNServerCommunicator/AddReceiver", ReplyAction="http://tempuri.org/IRNServerCommunicator/AddReceiverResponse")]
        System.Threading.Tasks.Task<RawNotification.Models.BaseServiceResult<string, long>> AddReceiverAsync(string oldReceiverId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRNServerCommunicatorChannel : QLKH.RNServerService.IRNServerCommunicator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RNServerCommunicatorClient : System.ServiceModel.ClientBase<QLKH.RNServerService.IRNServerCommunicator>, QLKH.RNServerService.IRNServerCommunicator {
        
        public RNServerCommunicatorClient() {
        }
        
        public RNServerCommunicatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RNServerCommunicatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RNServerCommunicatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RNServerCommunicatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RawNotification.Models.BaseServiceResult SendAllNotification() {
            return base.Channel.SendAllNotification();
        }
        
        public System.Threading.Tasks.Task<RawNotification.Models.BaseServiceResult> SendAllNotificationAsync() {
            return base.Channel.SendAllNotificationAsync();
        }
        
        public RawNotification.Models.BaseServiceResult AddNotification(byte[] Notification, byte[] NotificationPreviewContent, string[] oldReceiverIdList) {
            return base.Channel.AddNotification(Notification, NotificationPreviewContent, oldReceiverIdList);
        }
        
        public System.Threading.Tasks.Task<RawNotification.Models.BaseServiceResult> AddNotificationAsync(byte[] Notification, byte[] NotificationPreviewContent, string[] oldReceiverIdList) {
            return base.Channel.AddNotificationAsync(Notification, NotificationPreviewContent, oldReceiverIdList);
        }
        
        public RawNotification.Models.BaseServiceResult<string, long> AddReceiver(string oldReceiverId) {
            return base.Channel.AddReceiver(oldReceiverId);
        }
        
        public System.Threading.Tasks.Task<RawNotification.Models.BaseServiceResult<string, long>> AddReceiverAsync(string oldReceiverId) {
            return base.Channel.AddReceiverAsync(oldReceiverId);
        }
    }
}
