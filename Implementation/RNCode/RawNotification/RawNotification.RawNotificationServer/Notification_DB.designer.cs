#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RawNotification.RawNotificationServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Notification_DB")]
	public partial class Notification_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDevice(Device instance);
    partial void UpdateDevice(Device instance);
    partial void DeleteDevice(Device instance);
    partial void InsertToken(Token instance);
    partial void UpdateToken(Token instance);
    partial void DeleteToken(Token instance);
    partial void InsertDeviceNotification(DeviceNotification instance);
    partial void UpdateDeviceNotification(DeviceNotification instance);
    partial void DeleteDeviceNotification(DeviceNotification instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertOperatingSystem(OperatingSystem instance);
    partial void UpdateOperatingSystem(OperatingSystem instance);
    partial void DeleteOperatingSystem(OperatingSystem instance);
    partial void InsertReceiver(Receiver instance);
    partial void UpdateReceiver(Receiver instance);
    partial void DeleteReceiver(Receiver instance);
    partial void InsertReceiverNotification(ReceiverNotification instance);
    partial void UpdateReceiverNotification(ReceiverNotification instance);
    partial void DeleteReceiverNotification(ReceiverNotification instance);
    #endregion
		
		public Notification_DBDataContext() : 
				base(global::RawNotification.RawNotificationServer.Properties.Settings.Default.Notification_DBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public Notification_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Notification_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Notification_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Notification_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Device> Devices
		{
			get
			{
				return this.GetTable<Device>();
			}
		}
		
		public System.Data.Linq.Table<Token> Tokens
		{
			get
			{
				return this.GetTable<Token>();
			}
		}
		
		public System.Data.Linq.Table<DeviceNotification> DeviceNotifications
		{
			get
			{
				return this.GetTable<DeviceNotification>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<OperatingSystem> OperatingSystems
		{
			get
			{
				return this.GetTable<OperatingSystem>();
			}
		}
		
		public System.Data.Linq.Table<Receiver> Receivers
		{
			get
			{
				return this.GetTable<Receiver>();
			}
		}
		
		public System.Data.Linq.Table<ReceiverNotification> ReceiverNotifications
		{
			get
			{
				return this.GetTable<ReceiverNotification>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Device")]
	public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ReceiverNewID;
		
		private string _DeviceID;
		
		private string _URI;
		
		private int _OSID;
		
		private EntitySet<DeviceNotification> _DeviceNotifications;
		
		private EntityRef<OperatingSystem> _OperatingSystem;
		
		private EntityRef<Receiver> _Receiver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiverNewIDChanging(long value);
    partial void OnReceiverNewIDChanged();
    partial void OnDeviceIDChanging(string value);
    partial void OnDeviceIDChanged();
    partial void OnURIChanging(string value);
    partial void OnURIChanged();
    partial void OnOSIDChanging(int value);
    partial void OnOSIDChanged();
    #endregion
		
		public Device()
		{
			this._DeviceNotifications = new EntitySet<DeviceNotification>(new Action<DeviceNotification>(this.attach_DeviceNotifications), new Action<DeviceNotification>(this.detach_DeviceNotifications));
			this._OperatingSystem = default(EntityRef<OperatingSystem>);
			this._Receiver = default(EntityRef<Receiver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverNewID", DbType="BigInt NOT NULL")]
		public long ReceiverNewID
		{
			get
			{
				return this._ReceiverNewID;
			}
			set
			{
				if ((this._ReceiverNewID != value))
				{
					if (this._Receiver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverNewIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverNewID = value;
					this.SendPropertyChanged("ReceiverNewID");
					this.OnReceiverNewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceID", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URI", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string URI
		{
			get
			{
				return this._URI;
			}
			set
			{
				if ((this._URI != value))
				{
					this.OnURIChanging(value);
					this.SendPropertyChanging();
					this._URI = value;
					this.SendPropertyChanged("URI");
					this.OnURIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSID", DbType="Int NOT NULL")]
		public int OSID
		{
			get
			{
				return this._OSID;
			}
			set
			{
				if ((this._OSID != value))
				{
					if (this._OperatingSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOSIDChanging(value);
					this.SendPropertyChanging();
					this._OSID = value;
					this.SendPropertyChanged("OSID");
					this.OnOSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Device_DeviceNotification", Storage="_DeviceNotifications", ThisKey="DeviceID", OtherKey="DeviceID")]
		public EntitySet<DeviceNotification> DeviceNotifications
		{
			get
			{
				return this._DeviceNotifications;
			}
			set
			{
				this._DeviceNotifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatingSystem_Device", Storage="_OperatingSystem", ThisKey="OSID", OtherKey="OSID", IsForeignKey=true)]
		public OperatingSystem OperatingSystem
		{
			get
			{
				return this._OperatingSystem.Entity;
			}
			set
			{
				OperatingSystem previousValue = this._OperatingSystem.Entity;
				if (((previousValue != value) 
							|| (this._OperatingSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OperatingSystem.Entity = null;
						previousValue.Devices.Remove(this);
					}
					this._OperatingSystem.Entity = value;
					if ((value != null))
					{
						value.Devices.Add(this);
						this._OSID = value.OSID;
					}
					else
					{
						this._OSID = default(int);
					}
					this.SendPropertyChanged("OperatingSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receiver_Device", Storage="_Receiver", ThisKey="ReceiverNewID", OtherKey="NewID", IsForeignKey=true)]
		public Receiver Receiver
		{
			get
			{
				return this._Receiver.Entity;
			}
			set
			{
				Receiver previousValue = this._Receiver.Entity;
				if (((previousValue != value) 
							|| (this._Receiver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receiver.Entity = null;
						previousValue.Devices.Remove(this);
					}
					this._Receiver.Entity = value;
					if ((value != null))
					{
						value.Devices.Add(this);
						this._ReceiverNewID = value.NewID;
					}
					else
					{
						this._ReceiverNewID = default(long);
					}
					this.SendPropertyChanged("Receiver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceNotifications(DeviceNotification entity)
		{
			this.SendPropertyChanging();
			entity.Device = this;
		}
		
		private void detach_DeviceNotifications(DeviceNotification entity)
		{
			this.SendPropertyChanging();
			entity.Device = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Token")]
	public partial class Token : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TokenCodeID;
		
		private long _ReceiverNewID;
		
		private double _TokenCode;
		
		private EntityRef<Receiver> _Receiver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTokenCodeIDChanging(long value);
    partial void OnTokenCodeIDChanged();
    partial void OnReceiverNewIDChanging(long value);
    partial void OnReceiverNewIDChanged();
    partial void OnTokenCodeChanging(double value);
    partial void OnTokenCodeChanged();
    #endregion
		
		public Token()
		{
			this._Receiver = default(EntityRef<Receiver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenCodeID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TokenCodeID
		{
			get
			{
				return this._TokenCodeID;
			}
			set
			{
				if ((this._TokenCodeID != value))
				{
					this.OnTokenCodeIDChanging(value);
					this.SendPropertyChanging();
					this._TokenCodeID = value;
					this.SendPropertyChanged("TokenCodeID");
					this.OnTokenCodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverNewID", DbType="BigInt NOT NULL")]
		public long ReceiverNewID
		{
			get
			{
				return this._ReceiverNewID;
			}
			set
			{
				if ((this._ReceiverNewID != value))
				{
					if (this._Receiver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverNewIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverNewID = value;
					this.SendPropertyChanged("ReceiverNewID");
					this.OnReceiverNewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenCode", DbType="Float NOT NULL")]
		public double TokenCode
		{
			get
			{
				return this._TokenCode;
			}
			set
			{
				if ((this._TokenCode != value))
				{
					this.OnTokenCodeChanging(value);
					this.SendPropertyChanging();
					this._TokenCode = value;
					this.SendPropertyChanged("TokenCode");
					this.OnTokenCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receiver_Token", Storage="_Receiver", ThisKey="ReceiverNewID", OtherKey="NewID", IsForeignKey=true)]
		public Receiver Receiver
		{
			get
			{
				return this._Receiver.Entity;
			}
			set
			{
				Receiver previousValue = this._Receiver.Entity;
				if (((previousValue != value) 
							|| (this._Receiver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receiver.Entity = null;
						previousValue.Tokens.Remove(this);
					}
					this._Receiver.Entity = value;
					if ((value != null))
					{
						value.Tokens.Add(this);
						this._ReceiverNewID = value.NewID;
					}
					else
					{
						this._ReceiverNewID = default(long);
					}
					this.SendPropertyChanged("Receiver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceNotification")]
	public partial class DeviceNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ReceiverNotificationID;
		
		private string _DeviceID;
		
		private long _DeviceNotificationID;
		
		private EntityRef<Device> _Device;
		
		private EntityRef<ReceiverNotification> _ReceiverNotification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiverNotificationIDChanging(long value);
    partial void OnReceiverNotificationIDChanged();
    partial void OnDeviceIDChanging(string value);
    partial void OnDeviceIDChanged();
    partial void OnDeviceNotificationIDChanging(long value);
    partial void OnDeviceNotificationIDChanged();
    #endregion
		
		public DeviceNotification()
		{
			this._Device = default(EntityRef<Device>);
			this._ReceiverNotification = default(EntityRef<ReceiverNotification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverNotificationID", DbType="BigInt NOT NULL")]
		public long ReceiverNotificationID
		{
			get
			{
				return this._ReceiverNotificationID;
			}
			set
			{
				if ((this._ReceiverNotificationID != value))
				{
					if (this._ReceiverNotification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverNotificationIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverNotificationID = value;
					this.SendPropertyChanged("ReceiverNotificationID");
					this.OnReceiverNotificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceID", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string DeviceID
		{
			get
			{
				return this._DeviceID;
			}
			set
			{
				if ((this._DeviceID != value))
				{
					if (this._Device.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeviceIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceID = value;
					this.SendPropertyChanged("DeviceID");
					this.OnDeviceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceNotificationID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long DeviceNotificationID
		{
			get
			{
				return this._DeviceNotificationID;
			}
			set
			{
				if ((this._DeviceNotificationID != value))
				{
					this.OnDeviceNotificationIDChanging(value);
					this.SendPropertyChanging();
					this._DeviceNotificationID = value;
					this.SendPropertyChanged("DeviceNotificationID");
					this.OnDeviceNotificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Device_DeviceNotification", Storage="_Device", ThisKey="DeviceID", OtherKey="DeviceID", IsForeignKey=true)]
		public Device Device
		{
			get
			{
				return this._Device.Entity;
			}
			set
			{
				Device previousValue = this._Device.Entity;
				if (((previousValue != value) 
							|| (this._Device.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Device.Entity = null;
						previousValue.DeviceNotifications.Remove(this);
					}
					this._Device.Entity = value;
					if ((value != null))
					{
						value.DeviceNotifications.Add(this);
						this._DeviceID = value.DeviceID;
					}
					else
					{
						this._DeviceID = default(string);
					}
					this.SendPropertyChanged("Device");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReceiverNotification_DeviceNotification", Storage="_ReceiverNotification", ThisKey="ReceiverNotificationID", OtherKey="ReceiverNotificationID", IsForeignKey=true)]
		public ReceiverNotification ReceiverNotification
		{
			get
			{
				return this._ReceiverNotification.Entity;
			}
			set
			{
				ReceiverNotification previousValue = this._ReceiverNotification.Entity;
				if (((previousValue != value) 
							|| (this._ReceiverNotification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReceiverNotification.Entity = null;
						previousValue.DeviceNotifications.Remove(this);
					}
					this._ReceiverNotification.Entity = value;
					if ((value != null))
					{
						value.DeviceNotifications.Add(this);
						this._ReceiverNotificationID = value.ReceiverNotificationID;
					}
					else
					{
						this._ReceiverNotificationID = default(long);
					}
					this.SendPropertyChanged("ReceiverNotification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notification")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _NotificationID;
		
		private System.Data.Linq.Binary _NotificationContent;
		
		private EntitySet<ReceiverNotification> _ReceiverNotifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIDChanging(long value);
    partial void OnNotificationIDChanged();
    partial void OnNotificationContentChanging(System.Data.Linq.Binary value);
    partial void OnNotificationContentChanged();
    #endregion
		
		public Notification()
		{
			this._ReceiverNotifications = new EntitySet<ReceiverNotification>(new Action<ReceiverNotification>(this.attach_ReceiverNotifications), new Action<ReceiverNotification>(this.detach_ReceiverNotifications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long NotificationID
		{
			get
			{
				return this._NotificationID;
			}
			set
			{
				if ((this._NotificationID != value))
				{
					this.OnNotificationIDChanging(value);
					this.SendPropertyChanging();
					this._NotificationID = value;
					this.SendPropertyChanged("NotificationID");
					this.OnNotificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationContent", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary NotificationContent
		{
			get
			{
				return this._NotificationContent;
			}
			set
			{
				if ((this._NotificationContent != value))
				{
					this.OnNotificationContentChanging(value);
					this.SendPropertyChanging();
					this._NotificationContent = value;
					this.SendPropertyChanged("NotificationContent");
					this.OnNotificationContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notification_ReceiverNotification", Storage="_ReceiverNotifications", ThisKey="NotificationID", OtherKey="NotificationID")]
		public EntitySet<ReceiverNotification> ReceiverNotifications
		{
			get
			{
				return this._ReceiverNotifications;
			}
			set
			{
				this._ReceiverNotifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReceiverNotifications(ReceiverNotification entity)
		{
			this.SendPropertyChanging();
			entity.Notification = this;
		}
		
		private void detach_ReceiverNotifications(ReceiverNotification entity)
		{
			this.SendPropertyChanging();
			entity.Notification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OperatingSystem")]
	public partial class OperatingSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OSID;
		
		private string _OSName;
		
		private EntitySet<Device> _Devices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOSIDChanging(int value);
    partial void OnOSIDChanged();
    partial void OnOSNameChanging(string value);
    partial void OnOSNameChanged();
    #endregion
		
		public OperatingSystem()
		{
			this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OSID
		{
			get
			{
				return this._OSID;
			}
			set
			{
				if ((this._OSID != value))
				{
					this.OnOSIDChanging(value);
					this.SendPropertyChanging();
					this._OSID = value;
					this.SendPropertyChanged("OSID");
					this.OnOSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string OSName
		{
			get
			{
				return this._OSName;
			}
			set
			{
				if ((this._OSName != value))
				{
					this.OnOSNameChanging(value);
					this.SendPropertyChanging();
					this._OSName = value;
					this.SendPropertyChanged("OSName");
					this.OnOSNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OperatingSystem_Device", Storage="_Devices", ThisKey="OSID", OtherKey="OSID")]
		public EntitySet<Device> Devices
		{
			get
			{
				return this._Devices;
			}
			set
			{
				this._Devices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.OperatingSystem = this;
		}
		
		private void detach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.OperatingSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Receiver")]
	public partial class Receiver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _NewID;
		
		private string _OldID;
		
		private EntitySet<Device> _Devices;
		
		private EntitySet<Token> _Tokens;
		
		private EntitySet<ReceiverNotification> _ReceiverNotifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewIDChanging(long value);
    partial void OnNewIDChanged();
    partial void OnOldIDChanging(string value);
    partial void OnOldIDChanged();
    #endregion
		
		public Receiver()
		{
			this._Devices = new EntitySet<Device>(new Action<Device>(this.attach_Devices), new Action<Device>(this.detach_Devices));
			this._Tokens = new EntitySet<Token>(new Action<Token>(this.attach_Tokens), new Action<Token>(this.detach_Tokens));
			this._ReceiverNotifications = new EntitySet<ReceiverNotification>(new Action<ReceiverNotification>(this.attach_ReceiverNotifications), new Action<ReceiverNotification>(this.detach_ReceiverNotifications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long NewID
		{
			get
			{
				return this._NewID;
			}
			set
			{
				if ((this._NewID != value))
				{
					this.OnNewIDChanging(value);
					this.SendPropertyChanging();
					this._NewID = value;
					this.SendPropertyChanged("NewID");
					this.OnNewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldID", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string OldID
		{
			get
			{
				return this._OldID;
			}
			set
			{
				if ((this._OldID != value))
				{
					this.OnOldIDChanging(value);
					this.SendPropertyChanging();
					this._OldID = value;
					this.SendPropertyChanged("OldID");
					this.OnOldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receiver_Device", Storage="_Devices", ThisKey="NewID", OtherKey="ReceiverNewID")]
		public EntitySet<Device> Devices
		{
			get
			{
				return this._Devices;
			}
			set
			{
				this._Devices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receiver_Token", Storage="_Tokens", ThisKey="NewID", OtherKey="ReceiverNewID")]
		public EntitySet<Token> Tokens
		{
			get
			{
				return this._Tokens;
			}
			set
			{
				this._Tokens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receiver_ReceiverNotification", Storage="_ReceiverNotifications", ThisKey="NewID", OtherKey="ReceiverNewID")]
		public EntitySet<ReceiverNotification> ReceiverNotifications
		{
			get
			{
				return this._ReceiverNotifications;
			}
			set
			{
				this._ReceiverNotifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.Receiver = this;
		}
		
		private void detach_Devices(Device entity)
		{
			this.SendPropertyChanging();
			entity.Receiver = null;
		}
		
		private void attach_Tokens(Token entity)
		{
			this.SendPropertyChanging();
			entity.Receiver = this;
		}
		
		private void detach_Tokens(Token entity)
		{
			this.SendPropertyChanging();
			entity.Receiver = null;
		}
		
		private void attach_ReceiverNotifications(ReceiverNotification entity)
		{
			this.SendPropertyChanging();
			entity.Receiver = this;
		}
		
		private void detach_ReceiverNotifications(ReceiverNotification entity)
		{
			this.SendPropertyChanging();
			entity.Receiver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReceiverNotification")]
	public partial class ReceiverNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ReceiverNewID;
		
		private long _NotificationID;
		
		private long _ReceiverNotificationID;
		
		private bool _Readed;
		
		private EntitySet<DeviceNotification> _DeviceNotifications;
		
		private EntityRef<Notification> _Notification;
		
		private EntityRef<Receiver> _Receiver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiverNewIDChanging(long value);
    partial void OnReceiverNewIDChanged();
    partial void OnNotificationIDChanging(long value);
    partial void OnNotificationIDChanged();
    partial void OnReceiverNotificationIDChanging(long value);
    partial void OnReceiverNotificationIDChanged();
    partial void OnReadedChanging(bool value);
    partial void OnReadedChanged();
    #endregion
		
		public ReceiverNotification()
		{
			this._DeviceNotifications = new EntitySet<DeviceNotification>(new Action<DeviceNotification>(this.attach_DeviceNotifications), new Action<DeviceNotification>(this.detach_DeviceNotifications));
			this._Notification = default(EntityRef<Notification>);
			this._Receiver = default(EntityRef<Receiver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverNewID", DbType="BigInt NOT NULL")]
		public long ReceiverNewID
		{
			get
			{
				return this._ReceiverNewID;
			}
			set
			{
				if ((this._ReceiverNewID != value))
				{
					if (this._Receiver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverNewIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverNewID = value;
					this.SendPropertyChanged("ReceiverNewID");
					this.OnReceiverNewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationID", DbType="BigInt NOT NULL")]
		public long NotificationID
		{
			get
			{
				return this._NotificationID;
			}
			set
			{
				if ((this._NotificationID != value))
				{
					if (this._Notification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationIDChanging(value);
					this.SendPropertyChanging();
					this._NotificationID = value;
					this.SendPropertyChanged("NotificationID");
					this.OnNotificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverNotificationID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ReceiverNotificationID
		{
			get
			{
				return this._ReceiverNotificationID;
			}
			set
			{
				if ((this._ReceiverNotificationID != value))
				{
					this.OnReceiverNotificationIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverNotificationID = value;
					this.SendPropertyChanged("ReceiverNotificationID");
					this.OnReceiverNotificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Readed", DbType="Bit NOT NULL")]
		public bool Readed
		{
			get
			{
				return this._Readed;
			}
			set
			{
				if ((this._Readed != value))
				{
					this.OnReadedChanging(value);
					this.SendPropertyChanging();
					this._Readed = value;
					this.SendPropertyChanged("Readed");
					this.OnReadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReceiverNotification_DeviceNotification", Storage="_DeviceNotifications", ThisKey="ReceiverNotificationID", OtherKey="ReceiverNotificationID")]
		public EntitySet<DeviceNotification> DeviceNotifications
		{
			get
			{
				return this._DeviceNotifications;
			}
			set
			{
				this._DeviceNotifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notification_ReceiverNotification", Storage="_Notification", ThisKey="NotificationID", OtherKey="NotificationID", IsForeignKey=true)]
		public Notification Notification
		{
			get
			{
				return this._Notification.Entity;
			}
			set
			{
				Notification previousValue = this._Notification.Entity;
				if (((previousValue != value) 
							|| (this._Notification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notification.Entity = null;
						previousValue.ReceiverNotifications.Remove(this);
					}
					this._Notification.Entity = value;
					if ((value != null))
					{
						value.ReceiverNotifications.Add(this);
						this._NotificationID = value.NotificationID;
					}
					else
					{
						this._NotificationID = default(long);
					}
					this.SendPropertyChanged("Notification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receiver_ReceiverNotification", Storage="_Receiver", ThisKey="ReceiverNewID", OtherKey="NewID", IsForeignKey=true)]
		public Receiver Receiver
		{
			get
			{
				return this._Receiver.Entity;
			}
			set
			{
				Receiver previousValue = this._Receiver.Entity;
				if (((previousValue != value) 
							|| (this._Receiver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receiver.Entity = null;
						previousValue.ReceiverNotifications.Remove(this);
					}
					this._Receiver.Entity = value;
					if ((value != null))
					{
						value.ReceiverNotifications.Add(this);
						this._ReceiverNewID = value.NewID;
					}
					else
					{
						this._ReceiverNewID = default(long);
					}
					this.SendPropertyChanged("Receiver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceNotifications(DeviceNotification entity)
		{
			this.SendPropertyChanging();
			entity.ReceiverNotification = this;
		}
		
		private void detach_DeviceNotifications(DeviceNotification entity)
		{
			this.SendPropertyChanging();
			entity.ReceiverNotification = null;
		}
	}
}
#pragma warning restore 1591
